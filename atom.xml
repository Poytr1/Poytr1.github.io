<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Freedom Is Slavery Ignorance Is Strength</title>
  <subtitle>I&#39;m Peterson Xu</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://poytr1.github.io/"/>
  <updated>2017-06-22T04:11:01.000Z</updated>
  <id>http://poytr1.github.io/</id>
  
  <author>
    <name>Peterson Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EDSL With Typed Lambda Calculus Implemented In Haskell</title>
    <link href="http://poytr1.github.io/2017/06/22/EDSL-With-Typed-Lambda-Calculus-Implemented-In-Haskell/"/>
    <id>http://poytr1.github.io/2017/06/22/EDSL-With-Typed-Lambda-Calculus-Implemented-In-Haskell/</id>
    <published>2017-06-22T04:09:28.000Z</published>
    <updated>2017-06-22T04:11:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EDSL-With-Typed-Lambda-Calculus-Implemented-In-Haskell"><a href="#EDSL-With-Typed-Lambda-Calculus-Implemented-In-Haskell" class="headerlink" title="EDSL With Typed Lambda Calculus Implemented In Haskell"></a>EDSL With Typed Lambda Calculus Implemented In Haskell</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Haskell是一种丰富的语言，它具有各种扩展功能。另外，我们可以将我们定义的语言(比如DSLs)中的lambda表达式embed到或者映射到Haskell中的lambda表达式中，这就是所谓的HOAS(Higher Order Abstract Syntax)。同时我们可以利用FInally Tagless，可以将HOAS表示成SKI Combinator的形式，最后可以添加Y Combinator实现带类型的计算，同时还能拥有很好的extensibility与类型安全。</p>
<h2 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h2><p>Lambda演算虽然非常简单，但是在计算与实现Lambda表达式规约上却有很多方法，主要是在计算策略上的不同，按模型主要分为三类：</p>
<ol>
<li>Call-by-value:arguments are evaluated before a function is entered</li>
<li>Call-by-name:arguments passed unevaluated</li>
<li>Call-by-need:arguments passed unevaluated but an expression is only evaluated once and shared upon subsequent references</li>
</ol>
<p>在不同模型下的规约步骤不同:</p>
<p><em>Call-by-value</em>:</p>
<ol>
<li>Evaluate <em>x</em> to <em>v</em></li>
<li>Evaluate <em>f</em> to <em>λy.e</em></li>
<li>Evaluate <em>[y/v]e</em></li>
</ol>
<p><em>Call-by-name</em>:</p>
<ol>
<li>Evaluate <em>f</em> to <em>λy.e</em></li>
<li>Evaluate <em>[y/x]e</em></li>
</ol>
<p><em>Call-by-need</em>:</p>
<ol>
<li>Allocate a thunk <em>v</em> for <em>x</em></li>
<li>Evaluate <em>f</em> to <em>λy.e</em></li>
<li>Evaluate <em>[y/v]e</em></li>
</ol>
<p>不管是哪种模型什么策略，都会遇到一个问题，即最后一步做substitution的时候，该如何正确地表示binding。最朴素的想法，substitution就是替换，我们完全可以将后面的expression看做字符串去替换前面变量所有的出现，这样就是一个简单的字符串匹配的问题了，用Haskell强大的模式匹配很快就能解决，代码如下:</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">data</span> <span class="token constant">Expr</span> <span class="token operator">=</span> <span class="token constant">Var</span> <span class="token constant">String</span> <span class="token operator">|</span> <span class="token constant">Abs</span> <span class="token constant">String</span> <span class="token constant">Expr</span> <span class="token operator">|</span> <span class="token constant">App</span> <span class="token constant">Expr</span> <span class="token constant">Expr</span> <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Show</span><span class="token punctuation">,</span> <span class="token constant">Eq</span><span class="token punctuation">)</span>

<span class="token hvariable">eval</span> <span class="token operator">::</span> <span class="token constant">Expr</span> <span class="token operator">-></span> <span class="token constant">Expr</span> 
<span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">Var</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">Var</span> <span class="token hvariable">x</span> 
<span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">Abs</span> <span class="token hvariable">x</span> <span class="token hvariable">e</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">Abs</span> <span class="token hvariable">x</span> <span class="token punctuation">(</span><span class="token hvariable">eval</span> <span class="token hvariable">e</span><span class="token punctuation">)</span>
<span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">App</span> <span class="token hvariable">l</span><span class="token operator">@</span><span class="token punctuation">(</span><span class="token constant">Var</span> <span class="token hvariable">_</span><span class="token punctuation">)</span> <span class="token hvariable">r</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">App</span> <span class="token hvariable">l</span> <span class="token punctuation">(</span><span class="token hvariable">eval</span> <span class="token hvariable">r</span><span class="token punctuation">)</span>
<span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">App</span> <span class="token hvariable">l</span><span class="token operator">@</span><span class="token punctuation">(</span><span class="token constant">App</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span><span class="token punctuation">)</span> <span class="token hvariable">r</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">App</span> <span class="token punctuation">(</span><span class="token hvariable">eval</span> <span class="token hvariable">l</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">eval</span> <span class="token hvariable">r</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">App</span> <span class="token punctuation">(</span><span class="token constant">Abs</span> <span class="token hvariable">x</span> <span class="token hvariable">l</span><span class="token punctuation">)</span> <span class="token hvariable">r</span><span class="token punctuation">)</span> <span class="token operator">=</span> 
    <span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token hvariable">subst</span> <span class="token hvariable">l</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
    <span class="token hvariable">subst</span> <span class="token punctuation">(</span><span class="token constant">Var</span> <span class="token hvariable">x</span>'<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token hvariable">x</span> <span class="token operator">==</span> <span class="token hvariable">x</span>' <span class="token operator">=</span> <span class="token hvariable">r</span>
    <span class="token hvariable">subst</span> <span class="token punctuation">(</span><span class="token constant">Var</span> <span class="token hvariable">x</span>'<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token hvariable">x</span> <span class="token operator">/=</span> <span class="token hvariable">x</span>' <span class="token operator">=</span> <span class="token constant">Var</span> <span class="token hvariable">x</span>'
    <span class="token hvariable">subst</span> <span class="token punctuation">(</span><span class="token constant">Abs</span> <span class="token hvariable">x</span>' <span class="token hvariable">y</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token hvariable">x</span> <span class="token operator">==</span> <span class="token hvariable">x</span>' <span class="token operator">=</span> <span class="token constant">Abs</span> <span class="token hvariable">x</span>' <span class="token hvariable">y</span>
    <span class="token hvariable">subst</span> <span class="token punctuation">(</span><span class="token constant">Abs</span> <span class="token hvariable">x</span>' <span class="token hvariable">y</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token hvariable">x</span> <span class="token operator">/=</span> <span class="token hvariable">x</span>' <span class="token operator">=</span> <span class="token constant">Abs</span> <span class="token hvariable">x</span>' <span class="token punctuation">(</span><span class="token hvariable">subst</span> <span class="token hvariable">y</span><span class="token punctuation">)</span>
    <span class="token hvariable">subst</span> <span class="token punctuation">(</span><span class="token constant">App</span> <span class="token hvariable">ll</span> <span class="token hvariable">lr</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">App</span> <span class="token punctuation">(</span><span class="token hvariable">subst</span> <span class="token hvariable">ll</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">subst</span> <span class="token hvariable">lr</span><span class="token punctuation">)</span>
</code></pre>
<p>考虑这样的一个Lambda表达式<code>\y(\x\y x)y</code></p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token hvariable">term</span> <span class="token operator">=</span> <span class="token constant">Abs</span> <span class="token string">"y"</span> <span class="token punctuation">(</span><span class="token constant">App</span> <span class="token punctuation">(</span><span class="token constant">Abs</span> <span class="token string">"x"</span> <span class="token punctuation">(</span><span class="token constant">Abs</span> <span class="token string">"y"</span> <span class="token punctuation">(</span><span class="token constant">Var</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Var</span> <span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token hvariable">main</span> <span class="token operator">=</span> <span class="token builtin">putStr</span> <span class="token operator">$</span> <span class="token builtin">show</span> <span class="token operator">$</span> <span class="token hvariable">eval</span> <span class="token hvariable">term</span>
</code></pre>
<p>运行结果为<code>Abs &quot;y&quot; (Abs &quot;y&quot; (Var &quot;y&quot;))</code>，这样语义就改变了(\x \y x -&gt; \y y变成了与y变量有关的函数)。</p>
<p>所以单纯的字符串替换是不行的，他不能看到一个Lambda表达式中的语义信息所以会出现改变语义的substitution，我们需要需求一种替换，不会出现语义改变的问题，这种替换被称为capture-avoiding substitution（CAS）。</p>
<p>一种主流的方法是将语言embed到另一种metalanguage中，这样我们就借来了metalanguage中的binding，这叫做HOAS。</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">data</span> <span class="token constant">Expr</span> <span class="token operator">=</span> <span class="token constant">Lam</span> <span class="token punctuation">(</span><span class="token constant">Expr</span> <span class="token operator">-></span> <span class="token constant">Expr</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token constant">App</span> <span class="token constant">Expr</span> <span class="token constant">Expr</span>
</code></pre>
<p>我们定义Expr方式也与定义普通的Lambda function类似，同时对表达式的计算也变得简单了，可以简单地使用Haskell来计算。</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token hvariable">y</span> <span class="token operator">=</span> <span class="token constant">Lam</span> <span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">f</span> <span class="token operator">-></span> <span class="token keyword">let</span> <span class="token hvariable">e</span> <span class="token operator">=</span> <span class="token constant">Lam</span> <span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">x</span> <span class="token operator">-></span> <span class="token constant">App</span> <span class="token hvariable">f</span> <span class="token punctuation">(</span><span class="token constant">App</span> <span class="token hvariable">x</span> <span class="token hvariable">x</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token constant">App</span> <span class="token hvariable">e</span> <span class="token hvariable">e</span><span class="token punctuation">)</span>

<span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">Lam</span> <span class="token hvariable">l</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">Lam</span> <span class="token hvariable">l</span>
<span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">App</span> <span class="token punctuation">(</span><span class="token constant">Lam</span> <span class="token hvariable">l</span><span class="token punctuation">)</span> <span class="token hvariable">r</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token hvariable">l</span> <span class="token hvariable">r</span><span class="token punctuation">)</span>
<span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">App</span> <span class="token hvariable">l</span> <span class="token hvariable">r</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">App</span> <span class="token punctuation">(</span><span class="token hvariable">eval</span> <span class="token hvariable">l</span><span class="token punctuation">)</span> <span class="token hvariable">r</span><span class="token punctuation">)</span>
</code></pre>
<p>这样的形式目前看来很不错，很好并且很优雅地解决了binding的问题，但是这样的形式是不是完美的呢？很显然存在很多麻烦之处。</p>
<p>首先，我们需要更多时间考虑怎么把一个expression转换成这种的形式，因为我们需要使用Haskell本身的Lambda binder。另外，由于所有的机制都包在Haskell的实现里面，所以即使像PretyPrint/Optimization/writing transformation passes这种简单的操作都会变得异常困难，我们很难看到一个函数本身的结构。所以这种形式只是适合计算的一种很好的形式，并不适合通用的转换。那么我们能不能找到一种方法在保留HOAS优势的同时简单地支持这些操作呢？</p>
<h2 id="Expression-problem"><a href="#Expression-problem" class="headerlink" title="Expression problem"></a>Expression problem</h2><p>首先来看一个expression的问题。这里用经典的“Hutton’s Razor”作为例子，它是使用加法运算+从整数文字建立的简单算术表达式的语言，在Haskell中可以这么表示：</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">data</span> <span class="token constant">Exp</span> <span class="token operator">=</span> <span class="token constant">Lit</span> <span class="token constant">Int</span> <span class="token operator">|</span> <span class="token constant">Add</span> <span class="token constant">Exp</span> <span class="token constant">Exp</span>
</code></pre>
<p>这样，比如表达式(1+(2+3))就可以写成：</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token hvariable">e1</span> <span class="token operator">=</span> <span class="token constant">Add</span> <span class="token punctuation">(</span><span class="token constant">Lit</span> <span class="token number">1</span><span class="token punctuation">)</span>
         <span class="token punctuation">(</span><span class="token constant">Add</span> <span class="token punctuation">(</span><span class="token constant">Lit</span> <span class="token number">2</span><span class="token punctuation">)</span>
               <span class="token punctuation">(</span><span class="token constant">Lit</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>给他写一个eval能够计算形如上面的表达式的值:</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token hvariable">eval</span> <span class="token operator">::</span> <span class="token constant">Exp</span> <span class="token operator">-></span> <span class="token constant">Int</span>
<span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">Lit</span> <span class="token hvariable">n</span><span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token hvariable">n</span>
<span class="token hvariable">eval</span> <span class="token punctuation">(</span><span class="token constant">Add</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">eval</span> <span class="token hvariable">x</span> <span class="token operator">+</span> <span class="token hvariable">eval</span> <span class="token hvariable">y</span>
</code></pre>
<p>我们可以很简单的为我们的Exp增加一个函数（比如pretty printing）:</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token hvariable">prettyprint</span> <span class="token operator">::</span> <span class="token constant">Exp</span> <span class="token operator">-></span> <span class="token constant">String</span>
<span class="token hvariable">prettyprint</span> <span class="token punctuation">(</span><span class="token constant">Lit</span> <span class="token hvariable">n</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">show</span> <span class="token hvariable">n</span> 
<span class="token hvariable">prettyprint</span> <span class="token punctuation">(</span><span class="token constant">Add</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"("</span> <span class="token operator">++</span> <span class="token hvariable">prettyprint</span> <span class="token hvariable">x</span> <span class="token operator">++</span> <span class="token string">"x"</span> <span class="token operator">++</span>
                        <span class="token hvariable">prettyprint</span> <span class="token hvariable">y</span> <span class="token operator">++</span> <span class="token string">")"</span>
</code></pre>
<p>并且不会影响到Exp的extensibility与type safe(我们根本不需要对Exp的constructor进行改变)。但是，当我们试着对我们定义的这个语言表达式做运算符的拓展的时候(比如添加一个乘法运算*)，事情好像就比较麻烦了。首先需要在数据类型Exp中增加一个Mult的constructor，我们还需要在每个涉及到Exp的function中添加case，比如上面的eval与prettyprint。真实世界事件的规模比我们举的这个例子大很多，存在多涉及到类似定义的数据类型的function，作为一个代码的维护者，必须极其小心检查每个function并为每个function加上独特的case——十分煎熬。所以这样的方法不能在为数据类型增加constructor的时候同时保持我们语言的extensibility与type safe。</p>
<p>这是用函数式语言会遇到的问题，我们再尝试用OO的语言实现，看有没有相同的问题。</p>
<p>在Java中定义一个Exp的接口，提供一个抽象方法eval()，上面每个constructor都可以写成继承这个Exp的类，并且实现它的抽象方法:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Exp</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Lit</span> <span class="token keyword">implements</span> <span class="token class-name">Exp</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">Lit</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">implements</span> <span class="token class-name">Exp</span> <span class="token punctuation">{</span>
    Exp x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">Add</span><span class="token punctuation">(</span>Exp l<span class="token punctuation">,</span> Exp r<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> l<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>尝试为其添加一个*运算，会发现简单很多，简单地再继承一下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Mult</span> <span class="token keyword">implements</span> <span class="token class-name">Exp</span> <span class="token punctuation">{</span>
  Exp x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
  <span class="token function">Mult</span><span class="token punctuation">(</span>Exp l<span class="token punctuation">,</span> Exp r<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> l<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">int</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>我们不需要碰到其他地方，只用简单地再增加实现一个类就行了。这么看来刚刚函数式语言的问题得到了很好的解决，但是同时带来了新的问题，添加新的方法（比如prettyprint）显得很困难，我们需要对每个class分别实现，即问题完全反过来了。</p>
<p>这种问题被称作expression problem，有一种很直观的解释。</p>
<p>考虑这样的长方形表格，列代表操作，行代表表达式的类型。表格中的元素代表相关类型的相关操作。</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Eval</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Lit</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Add</td>
</tr>
</tbody>
</table>
<p>在函数式语言中，这个表格中元素的定义是以列为单位的。一列所代表的函数表示一个对所有表达式类型的操作。所以在添加一个新的操作(function)的时候即添加新一列的时候很简单。但是在表达式类型即行这个维度上的可扩展性就没这么强了，因为对每列添加一个新行，每个交都是一个新的case，所以很困难。</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Eval</th>
<th style="text-align:center">Prettyprint</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Lit</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Add</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Mult</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>在面向对象的语言中，表格中元素的定义是由行组织的。每行所代表的表达式类型包含了这个类型下所有的操作(function)。所以对于面向对象语言而言，对于表达式类型的扩展是比较简单的，事实上只要添加一个新的Class。然而添加新的操作即在表格中添加一列比较困难，因为我们要在每个相关的class里面添加这个方法。</p>
<p>于是expression problem呼之欲出：能否在这个表格的横纵两个维度上都保持很好的扩展性同时又不失static guarantees且无需修改已有的代码呢？</p>
<h2 id="Object-algebras-amp-finally-tagless"><a href="#Object-algebras-amp-finally-tagless" class="headerlink" title="Object algebras &amp; finally tagless"></a>Object algebras &amp; finally tagless</h2><p>Object algebras是一个比较新的用来解决expression problem的OO设计模式。它是在<a href="https://www.cs.utexas.edu/~wcook/Drafts/2012/ecoop2012.pdf" target="_blank" rel="external">“Extensiblity for the Masses”</a>这篇文章中提出的，之所以收到推崇是因为他用相当简洁优雅的方式解决了expression problem，不需要对现有语言本身做拓展，在主流语言Java或者C#中就能实现。</p>
<p>Object algebras的主要想法与软件工程中的抽象工厂模式很像，即定义一个接口与其中的抽象方法，这样我们就可以用这个工厂来表示表达式，并生产具体的操作工厂。Java代码如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">ExpAlg</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
    T <span class="token function">lit</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    T <span class="token function">add</span><span class="token punctuation">(</span>T x<span class="token punctuation">,</span> T y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Eval</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">EvalExp</span> <span class="token keyword">implements</span> <span class="token class-name">ExpAlg</span><span class="token operator">&lt;</span>Eval<span class="token operator">></span> <span class="token punctuation">{</span>
    Eval <span class="token function">lit</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> n<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Eval <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">final</span> Eval x<span class="token punctuation">,</span> <span class="token keyword">final</span> Eval y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">int</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这样表达式<code>(1 + (2 + 3))</code> 可以表示为:</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">e1</span><span class="token punctuation">(</span>ExpAlg<span class="token operator">&lt;</span>T<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
        f<span class="token punctuation">.</span><span class="token function">lit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
            f<span class="token punctuation">.</span><span class="token function">lit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            f<span class="token punctuation">.</span><span class="token function">lit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>很简单地来计算e1的值:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> v1 <span class="token operator">=</span> <span class="token function">e1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EvalExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>首先来看看怎么在我们的语言中添加新的表达式类型‘乘法’。第一个想到的方法当然是在我们所定义的接口<code>ExpAlg&lt;T&gt;</code>中添加新的方法<code>Mult</code>，那么就回到了我们刚刚遇到的问题。</p>
<p>不改变原有的代码，考虑定义一个新的interface来 <em>extends</em> 我们之前定义的“工厂”：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">MulAlg</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">ExpAlg</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
    T <span class="token function">mul</span><span class="token punctuation">(</span>T x<span class="token punctuation">,</span> T y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>同时对这个新的表达式类型的计算该怎么实现呢，也很简单与前面类似<em>extends</em> EvalExp类即可：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">EvalMul</span> <span class="token keyword">extends</span> <span class="token class-name">EvalExp</span> <span class="token keyword">implements</span> <span class="token class-name">MulAlg</span><span class="token operator">&lt;</span>Eval<span class="token operator">></span> <span class="token punctuation">{</span>
    Eval <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">final</span> Eval x<span class="token punctuation">,</span> <span class="token keyword">final</span> Eval y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这样我们做到了<strong>在完全不触碰到原有的代码情况下添加了新的表达式类型‘乘法’</strong>。</p>
<p>再来看看如何添加新的操作(function)，比如prettyprint。定义一个新的接口，并且实现用它生产具体的工厂：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Prettyprint</span> <span class="token punctuation">{</span> String <span class="token function">prettyprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PrettyprintExp</span> <span class="token keyword">implements</span> <span class="token class-name">ExpAlg</span><span class="token operator">&lt;</span>Prettyprint<span class="token operator">></span> <span class="token punctuation">{</span>
    Prettyprint <span class="token function">lit</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Prettyprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String <span class="token function">Prettyprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">PrettyprintMul</span> <span class="token keyword">extends</span> <span class="token class-name">PrettyprintExp</span> <span class="token keyword">implements</span> <span class="token class-name">MulAlg</span><span class="token operator">&lt;</span>Prettyprint<span class="token operator">></span> <span class="token punctuation">{</span>
    Prettyprint <span class="token function">mult</span><span class="token punctuation">(</span><span class="token keyword">final</span> Prettyprint x<span class="token punctuation">,</span> <span class="token keyword">final</span> Prettyprint y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Prettyprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String <span class="token function">Prettyprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"("</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">Prettyprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" * "</span> <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token function">Prettyprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里抽象工厂接口<code>ExpAlg&lt;T&gt;</code>被称为对象代数接口，实现它的具体工厂称为对象代数。这个方法是受抽象代数的启发，抽象代数中代数结构由签名描述，签名作为一个接口，说明了在代数结构的基础集上定义的操作类型，一个代数提供这些操作的具体定义，类似于实现接口的类。</p>
<p>我们现在把上面的例子从Java代码转成Haskell代码，从而实现finally tagless。这个方法是在<a href="https://www.cs.rutgers.edu/~ccshan/tagless/jfp.pdf" target="_blank" rel="external">“Finally Tagless, Partially Evaluated”</a>这篇文章中提出的。</p>
<p>Java中的interface对应Haskell中的Typeclass,class对应instance：</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">class</span> <span class="token constant">ExpAlg</span> <span class="token hvariable">t</span> <span class="token keyword">where</span>
    <span class="token hvariable">lit</span> <span class="token operator">::</span> <span class="token constant">Int</span> <span class="token operator">-></span> <span class="token hvariable">t</span>
    <span class="token hvariable">add</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token operator">-></span> <span class="token hvariable">t</span>

<span class="token keyword">newtype</span> <span class="token constant">Eval</span> <span class="token operator">=</span> <span class="token constant">Eval</span> <span class="token punctuation">{</span> <span class="token hvariable">eval</span> <span class="token operator">::</span> <span class="token constant">Int</span> <span class="token punctuation">}</span>

<span class="token keyword">instance</span> <span class="token constant">ExpAlg</span> <span class="token constant">Eval</span> <span class="token keyword">where</span>
    <span class="token hvariable">lit</span> <span class="token hvariable">n</span>   <span class="token operator">=</span> <span class="token constant">Eval</span> <span class="token hvariable">n</span>
    <span class="token hvariable">add</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token operator">=</span> <span class="token constant">Eval</span> <span class="token operator">$</span> <span class="token hvariable">eval</span> <span class="token hvariable">x</span> <span class="token operator">+</span> <span class="token hvariable">eval</span> <span class="token hvariable">y</span>
</code></pre>
<p>现在可以两边扩展了：</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">instance</span> <span class="token constant">MulAlg</span> <span class="token constant">Eval</span> <span class="token keyword">where</span>
    <span class="token hvariable">mul</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token operator">=</span> <span class="token constant">Eval</span> <span class="token operator">$</span> <span class="token hvariable">eval</span> <span class="token hvariable">x</span> <span class="token operator">*</span> <span class="token hvariable">eval</span> <span class="token hvariable">y</span>

<span class="token keyword">newtype</span> <span class="token constant">Prettyprint</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token punctuation">{</span> <span class="token hvariable">prettyprint</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token punctuation">}</span>

<span class="token keyword">instance</span> <span class="token constant">ExpAlg</span> <span class="token constant">Prettyprint</span> <span class="token keyword">where</span>
    <span class="token hvariable">lit</span> <span class="token hvariable">n</span>   <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token operator">$</span> <span class="token builtin">show</span> <span class="token hvariable">n</span>
    <span class="token hvariable">add</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token operator">$</span> <span class="token string">"("</span> <span class="token operator">++</span> <span class="token hvariable">prettyprint</span> <span class="token hvariable">x</span> <span class="token operator">++</span> <span class="token string">" + "</span> <span class="token operator">++</span> <span class="token hvariable">prettyprint</span> <span class="token hvariable">y</span> <span class="token operator">++</span> <span class="token string">")"</span>

<span class="token keyword">instance</span> <span class="token constant">MulAlg</span> <span class="token constant">Prettyprint</span> <span class="token keyword">where</span>
    <span class="token hvariable">mul</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token operator">=</span> <span class="token constant">View</span> <span class="token operator">$</span> <span class="token string">"("</span> <span class="token operator">++</span> <span class="token hvariable">prettyprint</span> <span class="token hvariable">x</span> <span class="token operator">++</span> <span class="token string">" * "</span> <span class="token operator">++</span> <span class="token hvariable">prettyprint</span> <span class="token hvariable">y</span> <span class="token operator">++</span> <span class="token string">")"</span>
</code></pre>
<p>这里的形式已经和<a href="https://www.cs.rutgers.edu/~ccshan/tagless/jfp.pdf" target="_blank" rel="external">“Finally Tagless, Partially Evaluated”</a>中所提出的基本相同了，只不过在Haskell中不需要将MulAlg定义成ExpAlg的subclass，我们可以直接独立的定义这个typeclass：</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">class</span> <span class="token constant">MulAlg</span> <span class="token hvariable">t</span> <span class="token keyword">where</span>
    <span class="token hvariable">mul</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token operator">-></span> <span class="token hvariable">t</span>
</code></pre>
<p>这样所有含有乘法类型的表达式的类型值为<code>(ExpAlg t, MulAlg t) =&gt; t</code>。我们同样不需要更改已有的代码便能实现两边的扩展。</p>
<p>这里用到的“Hutton’s Razor”的例子所涉及到的都是Int类型，如果我们想在这个语言里面加入double，该如何实现呢？</p>
<p>答案是用Phantom types。我们给<code>ExpAlg</code>一个类型变量这样t从Type变成了<code>Type-&gt;Type</code>.</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">class</span> <span class="token constant">ExpAlg</span> <span class="token hvariable">t</span> <span class="token keyword">where</span>
    <span class="token hvariable">litI</span> <span class="token operator">::</span> <span class="token constant">Int</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token constant">Int</span>
    <span class="token hvariable">plusI</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token constant">Int</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token constant">Int</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token constant">Int</span>
    <span class="token hvariable">litD</span> <span class="token operator">::</span> <span class="token constant">Double</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token constant">Double</span>
    <span class="token hvariable">plusD</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token constant">Double</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token constant">Double</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token constant">Double</span>
</code></pre>
<p>注意到表达式ExpAlg并没有t这个值，所以我们称其为<em>phantom type</em>，它只是个假变量用来限制表达式的类型。</p>
<h2 id="The-very-beginning-problem"><a href="#The-very-beginning-problem" class="headerlink" title="The very beginning problem"></a>The very beginning problem</h2><blockquote>
<p>那么我们能不能找到一种方法在保留HOAS优势的同时简单地支持这些操作呢？</p>
</blockquote>
<p>现在我们有这样一个typeclass:</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">class</span> <span class="token constant">Language</span> <span class="token hvariable">t</span> <span class="token keyword">where</span> 
    <span class="token hvariable">app</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token hvariable">b</span>
    <span class="token operator">...</span><span class="token punctuation">(</span><span class="token hvariable">more</span> <span class="token hvariable">method</span><span class="token punctuation">)</span>
</code></pre>
<p>而且我们需要这样一个函数lam:</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token hvariable">lam</span> <span class="token operator">::</span> <span class="token constant">Language</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span>
</code></pre>
<p>在language class中并没有接受这个函数的constructor，或许我们可以实现instance Language PrettyPrint？</p>
<p>很明显方法是不可行的，我们没有办法得到一个<code>t (a -&gt; b)</code>这么个东西，<a href="http://link.zhihu.com/?target=http%3A//ecee.colorado.edu/ecen5533/fall11/reading/free.pdf" target="_blank" rel="external">Theorems for Free!</a>这篇文章中给了具体的证明。</p>
<p>所以想法变成了能不能改变t这个类型签名，而且我们为了要生成一个<code>t (a-&gt;b)</code>给app，所以假设新的类型签名为unknown，则现在lam：</p>
<pre class=" language-has"><code class="language-has">lam :: (unknown a -> unknown b) -> t (a -> b)
</code></pre>
<p>而且我们是可以生成unknown a的，通过得到一个unknown b就可以转换为<code>t (a -&gt; b)</code>。</p>
<p>unknown的类型呼之欲出：unknown x = t (a -&gt; x)。</p>
<p>根据自反性，我们很快得到一个unknown a(<code>t (a -&gt; a)</code>)。</p>
<p>我们也可以通过一个unknown b生成<code>t (a -&gt; b)</code>（本身即是）。</p>
<p>现在我们可以写出unknown了把它取名为Next：</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">newtype</span> <span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token hvariable">b</span> <span class="token operator">=</span> <span class="token constant">Next</span> <span class="token punctuation">{</span> <span class="token hvariable">unNext</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span><span class="token punctuation">}</span>

<span class="token hvariable">lam</span> <span class="token operator">::</span> <span class="token constant">SKI</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span>
<span class="token hvariable">lam</span> <span class="token hvariable">f</span> <span class="token operator">=</span> <span class="token hvariable">unNext</span> <span class="token operator">$</span> <span class="token hvariable">f</span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">i</span><span class="token punctuation">)</span>
</code></pre>
<p>再来看看我们需要在我们的Language中添加什么，首先我们需要一个unknown a，即<code>t (a -&gt; a)</code>，返回自身的一个method。同时为了用户能在lam中用到原来的term需要再添加一个<code>conv:: t a -&gt; Next t b a</code>，在Language中添加一个<code>t a -&gt; t (b -&gt; a)</code>。现在看看我们的Language是不是完备了：</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">class</span> <span class="token constant">Language</span> <span class="token hvariable">t</span> <span class="token keyword">where</span>
    <span class="token hvariable">app</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token hvariable">b</span>
    <span class="token hvariable">i</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">a</span><span class="token punctuation">)</span>
    <span class="token hvariable">k</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">a</span><span class="token punctuation">)</span>

<span class="token keyword">instance</span> <span class="token constant">Language</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token constant">Language</span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
    <span class="token hvariable">app</span> <span class="token operator">::</span> <span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token punctuation">(</span><span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">c</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token hvariable">c</span>
    <span class="token hvariable">app</span> <span class="token operator">=</span> <span class="token builtin">undefined</span>
    <span class="token hvariable">i</span> <span class="token operator">=</span> <span class="token hvariable">conv</span> <span class="token hvariable">i</span>
    <span class="token hvariable">k</span> <span class="token operator">=</span> <span class="token hvariable">conv</span> <span class="token hvariable">k</span>

<span class="token hvariable">conv</span> <span class="token operator">::</span> <span class="token constant">Language</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">b</span> <span class="token hvariable">a</span>
<span class="token hvariable">conv</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token constant">Next</span> <span class="token punctuation">(</span><span class="token hvariable">app</span> <span class="token hvariable">k</span> <span class="token hvariable">x</span><span class="token punctuation">)</span>
</code></pre>
<p>理论上来说我们要把原来class中的基本construct lisft到Next里面去，现在i与k都可以实现，但是会发现app无法lift进Next里的。这里unwrap掉app的类型，会得到：</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token hvariable">app</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">c</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">c</span><span class="token punctuation">)</span>
</code></pre>
<p>如果对组合逻辑熟悉的话，可以发现这其实就是SKI组合子中的S，所以只要把这个类型作为基础method加入我们的Language里，然后用conv实现就可以了。这样我们的Language整个就是SKI Combinator。它对于无类型的Lambda演算来是完备的，如果我们的language是有类型的话，可以手动再加上一个Y Combinator。事实上这并不是minimal的系统，因为I还可以用S、K来表达：<strong>SKK</strong>x → <strong>K</strong>x(<strong>K</strong>x) → x</p>
<p>SKI组合子的实现:</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token comment" spellcheck="true">{-# LANGUAGE
    MultiParamTypeClasses,
    RankNTypes,
    ScopedTypeVariables,
    FlexibleInstances,
    FlexibleContexts,
    UndecidableInstances,
    IncoherentInstances,
    PolyKinds #-}</span>

<span class="token keyword">class</span> <span class="token constant">SKI</span> <span class="token hvariable">t</span> <span class="token keyword">where</span>
    <span class="token hvariable">app</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token hvariable">b</span>
    <span class="token hvariable">s</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">c</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">c</span><span class="token punctuation">)</span>
    <span class="token hvariable">k</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">a</span><span class="token punctuation">)</span>
    <span class="token hvariable">i</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">a</span><span class="token punctuation">)</span>

<span class="token keyword">newtype</span> <span class="token constant">Prettyprint</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token punctuation">{</span> <span class="token hvariable">prettyprint</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token punctuation">}</span>

<span class="token keyword">instance</span> <span class="token constant">SKI</span> <span class="token constant">Prettyprint</span> <span class="token keyword">where</span>
    <span class="token hvariable">app</span> <span class="token hvariable">f</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token operator">$</span> <span class="token string">"("</span> <span class="token operator">++</span> <span class="token hvariable">prettyprint</span> <span class="token hvariable">f</span> <span class="token operator">++</span> <span class="token string">" "</span> <span class="token operator">++</span> <span class="token hvariable">prettyprint</span> <span class="token hvariable">x</span> <span class="token operator">++</span> <span class="token string">")"</span>
    <span class="token hvariable">s</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token string">"S"</span>
    <span class="token hvariable">k</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token string">"K"</span>
    <span class="token hvariable">i</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token string">"I"</span>

<span class="token keyword">data</span> <span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token hvariable">b</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token punctuation">(</span><span class="token hvariable">t</span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token constant">Slow</span> <span class="token punctuation">(</span><span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token hvariable">unNext</span> <span class="token operator">::</span> <span class="token constant">SKI</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span>
<span class="token hvariable">unNext</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">x</span>
<span class="token hvariable">unNext</span> <span class="token punctuation">(</span><span class="token constant">Fast</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">app</span> <span class="token hvariable">k</span> <span class="token hvariable">x</span>

<span class="token keyword">instance</span> <span class="token constant">SKI</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token constant">SKI</span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
    <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Fast</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Fast</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token operator">$</span> <span class="token hvariable">app</span> <span class="token hvariable">f</span> <span class="token hvariable">x</span>
    <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">Slow</span> <span class="token operator">$</span> <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token hvariable">app</span> <span class="token hvariable">s</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token hvariable">x</span>
    <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Fast</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token operator">$</span> <span class="token hvariable">app</span> <span class="token hvariable">k</span> <span class="token hvariable">x</span><span class="token punctuation">)</span>
    <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Fast</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token operator">$</span> <span class="token hvariable">app</span> <span class="token hvariable">k</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">x</span><span class="token punctuation">)</span>
    <span class="token hvariable">s</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token hvariable">s</span>
    <span class="token hvariable">k</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token hvariable">k</span>
    <span class="token hvariable">i</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token hvariable">i</span>

<span class="token hvariable">lam</span> <span class="token operator">::</span> <span class="token constant">SKI</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span>
<span class="token hvariable">lam</span> <span class="token hvariable">f</span> <span class="token operator">=</span> <span class="token hvariable">unNext</span> <span class="token operator">$</span> <span class="token hvariable">f</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">i</span><span class="token punctuation">)</span>

<span class="token hvariable">c</span> <span class="token operator">::</span> <span class="token constant">SKI</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">c</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">c</span><span class="token punctuation">)</span>
<span class="token hvariable">c</span> <span class="token operator">=</span> <span class="token hvariable">lam</span> <span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">abc</span> <span class="token operator">-></span> <span class="token hvariable">lam</span> <span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">lam</span> <span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Fast</span> <span class="token operator">$</span> <span class="token constant">Fast</span> <span class="token hvariable">abc</span><span class="token punctuation">)</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token operator">$</span> <span class="token constant">Fast</span> <span class="token hvariable">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token hvariable">main</span> <span class="token operator">::</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token hvariable">main</span> <span class="token operator">=</span> <span class="token builtin">putStrLn</span> <span class="token operator">$</span> <span class="token hvariable">prettyprint</span> <span class="token hvariable">c</span>
</code></pre>
<p>输出结果：</p>
<p><code>((S ((S (K S)) ((S (K K)) ((S (K S)) ((S ((S (K S)) ((S (K K)) I))) (K I)))))) (K ((S (K K)) I)))</code></p>
<p>现在我们再回到“Hutton’s Razor”这个例子并给他加上SKI Combinator：</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">class</span> <span class="token constant">ExpAlg</span> <span class="token hvariable">t</span> <span class="token keyword">where</span>
    <span class="token hvariable">lit</span> <span class="token operator">::</span> <span class="token constant">Int</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token constant">Int</span>
    <span class="token hvariable">add</span> <span class="token operator">::</span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token constant">Int</span> <span class="token operator">-></span> <span class="token constant">Int</span> <span class="token operator">-></span> <span class="token constant">Int</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token constant">SKI</span> <span class="token hvariable">r</span> <span class="token keyword">where</span>
    <span class="token hvariable">app</span> <span class="token operator">::</span> <span class="token hvariable">r</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">r</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">r</span> <span class="token hvariable">b</span>
    <span class="token hvariable">s</span> <span class="token operator">::</span> <span class="token hvariable">r</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">c</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">c</span><span class="token punctuation">)</span>
    <span class="token hvariable">k</span> <span class="token operator">::</span> <span class="token hvariable">r</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">a</span><span class="token punctuation">)</span>
    <span class="token hvariable">i</span> <span class="token operator">::</span> <span class="token hvariable">r</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">a</span><span class="token punctuation">)</span>

<span class="token keyword">newtype</span> <span class="token constant">Prettyprint</span> <span class="token hvariable">n</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token punctuation">{</span> <span class="token hvariable">prettyprint</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token punctuation">}</span>

<span class="token keyword">instance</span> <span class="token constant">ExpAlg</span> <span class="token constant">Prettyprint</span> <span class="token keyword">where</span>
    <span class="token hvariable">lit</span> <span class="token hvariable">n</span>   <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token operator">$</span> <span class="token builtin">show</span> <span class="token hvariable">n</span>
    <span class="token hvariable">add</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token string">"add"</span>

<span class="token keyword">instance</span> <span class="token constant">SKI</span> <span class="token constant">Prettyprint</span> <span class="token keyword">where</span>
    <span class="token hvariable">app</span> <span class="token hvariable">f</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token operator">$</span> <span class="token string">"("</span> <span class="token operator">++</span> <span class="token hvariable">prettyprint</span> <span class="token hvariable">f</span> <span class="token operator">++</span> <span class="token string">" "</span> <span class="token operator">++</span> <span class="token hvariable">prettyprint</span> <span class="token hvariable">x</span> <span class="token operator">++</span> <span class="token string">")"</span>
    <span class="token hvariable">s</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token string">"S"</span>
    <span class="token hvariable">k</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token string">"K"</span>
    <span class="token hvariable">i</span> <span class="token operator">=</span> <span class="token constant">Prettyprint</span> <span class="token string">"I"</span>  

<span class="token keyword">newtype</span> <span class="token constant">Eval</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token constant">Eval</span> <span class="token punctuation">{</span> <span class="token hvariable">eval</span> <span class="token operator">::</span> <span class="token hvariable">x</span> <span class="token punctuation">}</span>

<span class="token keyword">instance</span> <span class="token constant">ExpAlg</span> <span class="token constant">Eval</span> <span class="token keyword">where</span>
    <span class="token hvariable">lit</span> <span class="token hvariable">n</span>   <span class="token operator">=</span> <span class="token constant">Eval</span> <span class="token hvariable">n</span>
    <span class="token hvariable">add</span> <span class="token operator">=</span> <span class="token constant">Eval</span> <span class="token operator">$</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span>

<span class="token keyword">instance</span> <span class="token constant">SKI</span> <span class="token constant">Eval</span> <span class="token keyword">where</span> 
    <span class="token hvariable">app</span> <span class="token hvariable">f</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token constant">Eval</span> <span class="token operator">$</span> <span class="token hvariable">eval</span> <span class="token hvariable">f</span> <span class="token operator">$</span> <span class="token hvariable">eval</span> <span class="token hvariable">x</span> 
    <span class="token hvariable">s</span> <span class="token operator">=</span> <span class="token constant">Eval</span> <span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">abc</span> <span class="token hvariable">ab</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">abc</span> <span class="token hvariable">a</span> <span class="token punctuation">(</span><span class="token hvariable">ab</span> <span class="token hvariable">a</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token hvariable">k</span> <span class="token operator">=</span> <span class="token constant">Eval</span> <span class="token builtin">const</span>
    <span class="token hvariable">i</span> <span class="token operator">=</span> <span class="token constant">Eval</span> <span class="token builtin">id</span>

<span class="token keyword">data</span> <span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token hvariable">b</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token punctuation">(</span><span class="token hvariable">t</span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token constant">Slow</span> <span class="token punctuation">(</span><span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token hvariable">unNext</span> <span class="token operator">::</span> <span class="token constant">SKI</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span>
<span class="token hvariable">unNext</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">x</span>
<span class="token hvariable">unNext</span> <span class="token punctuation">(</span><span class="token constant">Fast</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">app</span> <span class="token hvariable">k</span> <span class="token hvariable">x</span>

<span class="token keyword">instance</span> <span class="token constant">SKI</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token constant">SKI</span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
    <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Fast</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Fast</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token operator">$</span> <span class="token hvariable">app</span> <span class="token hvariable">f</span> <span class="token hvariable">x</span>
    <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">Slow</span> <span class="token operator">$</span> <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token hvariable">app</span> <span class="token hvariable">s</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token hvariable">x</span>
    <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Fast</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token operator">$</span> <span class="token hvariable">app</span> <span class="token hvariable">k</span> <span class="token hvariable">x</span><span class="token punctuation">)</span>
    <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Fast</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token operator">$</span> <span class="token hvariable">app</span> <span class="token hvariable">k</span> <span class="token hvariable">f</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">x</span><span class="token punctuation">)</span>
    <span class="token hvariable">s</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token hvariable">s</span>
    <span class="token hvariable">k</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token hvariable">k</span>
    <span class="token hvariable">i</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token hvariable">i</span>

<span class="token keyword">instance</span> <span class="token constant">ExpAlg</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token constant">ExpAlg</span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">t</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
    <span class="token hvariable">lit</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token punctuation">(</span><span class="token hvariable">lit</span> <span class="token hvariable">x</span><span class="token punctuation">)</span>
    <span class="token hvariable">add</span> <span class="token operator">=</span> <span class="token constant">Fast</span> <span class="token hvariable">add</span>

<span class="token keyword">class</span> <span class="token constant">NT</span> <span class="token hvariable">l</span> <span class="token hvariable">r</span> <span class="token keyword">where</span>
    <span class="token hvariable">conv</span> <span class="token operator">::</span> <span class="token hvariable">l</span> <span class="token hvariable">t</span> <span class="token operator">-></span> <span class="token hvariable">r</span> <span class="token hvariable">t</span>

<span class="token keyword">instance</span> <span class="token constant">NT</span> <span class="token hvariable">l</span> <span class="token hvariable">r</span> <span class="token operator">=></span> <span class="token constant">NT</span> <span class="token hvariable">l</span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">r</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
    <span class="token hvariable">conv</span> <span class="token operator">=</span> <span class="token constant">Fast</span><span class="token operator"> . </span><span class="token hvariable">conv</span>

<span class="token keyword">instance</span> <span class="token constant">NT</span> <span class="token hvariable">x</span> <span class="token hvariable">x</span> <span class="token keyword">where</span>
    <span class="token hvariable">conv</span> <span class="token operator">=</span> <span class="token builtin">id</span>

<span class="token keyword">instance</span> <span class="token constant">NT</span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">r</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">r</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
    <span class="token hvariable">conv</span> <span class="token operator">=</span> <span class="token builtin">id</span>

<span class="token hvariable">lam</span> <span class="token operator">::</span> <span class="token hvariable">forall</span> <span class="token hvariable">r</span> <span class="token hvariable">a</span> <span class="token hvariable">b</span><span class="token punctuation">.</span> <span class="token constant">SKI</span> <span class="token hvariable">r</span> <span class="token operator">=></span>
 <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token hvariable">forall</span> <span class="token hvariable">k</span><span class="token punctuation">.</span> <span class="token constant">NT</span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">r</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token hvariable">k</span> <span class="token operator">=></span> <span class="token hvariable">k</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token constant">Next</span> <span class="token hvariable">r</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">r</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span>
<span class="token hvariable">lam</span> <span class="token hvariable">f</span> <span class="token operator">=</span> <span class="token hvariable">unNext</span> <span class="token operator">$</span> <span class="token hvariable">f</span> <span class="token punctuation">(</span><span class="token hvariable">conv</span> <span class="token punctuation">(</span><span class="token constant">Slow</span> <span class="token hvariable">i</span> <span class="token operator">::</span> <span class="token constant">Next</span> <span class="token hvariable">r</span> <span class="token hvariable">a</span> <span class="token hvariable">a</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token hvariable">c</span> <span class="token operator">::</span> <span class="token constant">SKI</span> <span class="token hvariable">t</span> <span class="token operator">=></span> <span class="token hvariable">t</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">c</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">c</span><span class="token punctuation">)</span>
<span class="token hvariable">c</span> <span class="token operator">=</span> <span class="token hvariable">lam</span> <span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">abc</span> <span class="token operator">-></span> <span class="token hvariable">lam</span> <span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">b</span> <span class="token operator">-></span> <span class="token hvariable">lam</span> <span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token hvariable">app</span> <span class="token hvariable">abc</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token hvariable">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token hvariable">double</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token constant">SKI</span> <span class="token hvariable">r</span> <span class="token punctuation">,</span> <span class="token constant">ExpAlg</span> <span class="token hvariable">r</span> <span class="token punctuation">)</span><span class="token operator">=></span> <span class="token hvariable">r</span> <span class="token punctuation">(</span><span class="token constant">Int</span> <span class="token operator">-></span> <span class="token constant">Int</span><span class="token punctuation">)</span>
<span class="token hvariable">double</span> <span class="token operator">=</span> <span class="token hvariable">lam</span> <span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">x</span> <span class="token operator">-></span> <span class="token hvariable">app</span> <span class="token punctuation">(</span><span class="token hvariable">app</span> <span class="token hvariable">add</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token hvariable">x</span><span class="token punctuation">)</span>

<span class="token hvariable">main</span> <span class="token operator">::</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token hvariable">main</span> <span class="token operator">=</span> <span class="token builtin">putStrLn</span> <span class="token operator">$</span> <span class="token hvariable">prettyprint</span> <span class="token hvariable">double</span>
</code></pre>
<p>double这个函数将输入的数加倍，用我们的language输出为：</p>
<p><code>((S ((S (K add)) I)) I)</code></p>
<p>如果我们再加上Y Combinator就可以实现这个表达式的计算：</p>
<p><code>Fix (((S ((S (K add)) I)) I))</code></p>
<p>其中<code>eval (Fix f) = (eval f) (eval (Fix f))</code>。</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>为了实现一个embed domain specified language(EDSL)，我们首先考虑用Haskell这个metalanguage用HOAS来实现lambda表达式的binding。同时为了解决expression problem我们用tagless的方法将lambda表达式用SKI Combinator的方式来表示，让我们能“看进”一个lambda表达式，了解他的结构，实现诸如prettyprint的功能。</p>
<p>这样我们的EDSL拥有了如下的feature：</p>
<ol>
<li>支持typed的lambda calculus。</li>
<li>type safe，可以利用Haskell的类型系统。</li>
<li>有很好的extensibility，方便地添加类型、方法，易于维护。</li>
</ol>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Expression_problem" target="_blank" rel="external">Expression problem</a></p>
<p><a href="https://link.zhihu.com/?target=http%3A//link.springer.com/chapter/10.1007/978-3-642-31057-7_2" target="_blank" rel="external">Extensibility for the Masses</a></p>
<p><a href="https://link.zhihu.com/?target=http%3A//journals.cambridge.org/action/displayAbstract%3FfromPage%3Donline%26aid%3D6171376%26fulltextType%3DRA%26fileId%3DS0956796809007205" target="_blank" rel="external">Finally tagless, partially evaluated: Tagless staged interpreters for simpler typed languages</a></p>
<p><a href="https://link.zhihu.com/?target=https%3A//oleksandrmanzyuk.wordpress.com/2014/06/18/from-object-algebras-to-finally-tagless-interpreters-2/" target="_blank" rel="external">From Object Algebras to Finally Tagless Interpreters</a></p>
<p><a href="https://link.zhihu.com/?target=https%3A//en.wikibooks.org/wiki/Haskell/GADT" target="_blank" rel="external">Haskell/GADT</a></p>
<p><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Lambda_calculus" target="_blank" rel="external">Lambda calculus</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;EDSL-With-Typed-Lambda-Calculus-Implemented-In-Haskell&quot;&gt;&lt;a href=&quot;#EDSL-With-Typed-Lambda-Calculus-Implemented-In-Haskell&quot; class=&quot;hea
    
    </summary>
    
    
      <category term="Haskell" scheme="http://poytr1.github.io/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>macOS Sierra下配置spacemacs+proof-general+coq</title>
    <link href="http://poytr1.github.io/2017/03/28/&#39;spacemacs+proof-general+coq&#39;/"/>
    <id>http://poytr1.github.io/2017/03/28/&#39;spacemacs+proof-general+coq&#39;/</id>
    <published>2017-03-28T14:16:49.000Z</published>
    <updated>2017-07-09T02:57:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="macOS-Sierra下配置spacemacs-proof-general-coq"><a href="#macOS-Sierra下配置spacemacs-proof-general-coq" class="headerlink" title="macOS Sierra下配置spacemacs+proof-general+coq"></a>macOS Sierra下配置spacemacs+proof-general+coq</h1><ol>
<li><p>替换<strong>homebrew</strong>现有的上游，这里使用清华源。(如果之前已经配置过可以无视~)</p>
<pre class=" language-Shell"><code class="language-Shell">$ cd "$(brew --repo)"
$ git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git

$ cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"
$ git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git

$ brew update
</code></pre>
</li>
<li><p>用<strong>homebrew</strong>下载<strong>proof-general</strong></p>
<pre class=" language-shell"><code class="language-shell">$ brew install proof-general
</code></pre>
</li>
<li><p>用<strong>homebrew</strong>下载<strong>emacs-plus</strong></p>
<pre class=" language-shell"><code class="language-shell">$ brew tap d12frosted/emacs-plus
$ brew install emacs-plus
$ brew linkapps emacs-plus
</code></pre>
</li>
<li><p>如果之前没有<em>Emacs configuration</em>，(可以看看有没有文件夹<strong>~/.emacs.d</strong>，没有的话就是之前没有配置过)，直接git clone spacemacs即可</p>
<pre class=" language-shell"><code class="language-shell">$ git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
</code></pre>
<p>如果目录下已经有文件了，不想保存之前的配置的话，直接<code>rm -rf</code>删除文件夹即可，如果想保留之前的配置，<a href="[https://github.com/syl20bnr/spacemacs#install](https://github.com/syl20bnr/spacemacs#install">这里</a>)有详细的说明。</p>
</li>
<li><p>先启动一次，更新一些配置，并且设置一些初始的选项，比如使用vim模式还是其他的等等，这里按照个人喜好即可。之后在根目录会生成spacemacs的配置文件<em>.spacemacs</em>。</p>
<pre class=" language-shell"><code class="language-shell">$ emacs --insecure
</code></pre>
</li>
<li><p>下载<strong>spacemacs-coq layer</strong>，并在<strong>~/.spacemacs</strong>文件里的<code>dotspacemacs-configuration-layers</code>中添加<strong>coq</strong>的支持。</p>
<pre class=" language-shell"><code class="language-shell">git clone https://github.com/olivierverdier/spacemacs-coq ~/.emacs.d/private/coq
</code></pre>
</li>
<li><p>更改<em>emacs</em> package的安装源，同样修改<strong>~/.spacemacs</strong>文件，<code>user-init</code>中添加：</p>
<pre class=" language-lisp"><code class="language-lisp">(setq configuration-layer--elpa-archives
  '(("melpai-cn" . "http://elpa.zilongshanren.com/melpa/")
    ("org-cn"   . "http://elpa.zilongshanren.com/org/")
    ("gnu-cn"   . "http://elpa.zilongshanren.com/gnu/")))
</code></pre>
</li>
<li><p>重新启动emacs，等待自动安装<strong>Company-Coq</strong>，这样就配置完成啦。</p>
</li>
</ol>
<p>PS：在此之前我已经安装了过了OCaml与CoqIDE</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;macOS-Sierra下配置spacemacs-proof-general-coq&quot;&gt;&lt;a href=&quot;#macOS-Sierra下配置spacemacs-proof-general-coq&quot; class=&quot;headerlink&quot; title=&quot;macOS Si
    
    </summary>
    
    
      <category term="Coq" scheme="http://poytr1.github.io/tags/Coq/"/>
    
  </entry>
  
  <entry>
    <title>说一说&#39;Monads&#39;</title>
    <link href="http://poytr1.github.io/2017/03/15/%E8%AF%B4%E4%B8%80%E8%AF%B4&#39;Monads&#39;/"/>
    <id>http://poytr1.github.io/2017/03/15/说一说&#39;Monads&#39;/</id>
    <published>2017-03-15T02:12:20.000Z</published>
    <updated>2017-03-18T12:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说一说‘Monads’"><a href="#说一说‘Monads’" class="headerlink" title="说一说‘Monads’"></a>说一说‘<em>Monads</em>’</h1><h3 id="1-关于范畴论"><a href="#1-关于范畴论" class="headerlink" title="1.关于范畴论"></a>1.关于<em>范畴论</em></h3><blockquote>
<p>范畴论是<strong>数学</strong>的一门学科，以抽象的方法来处理数学概念，将这些概念形式化成一组组“物件”及“态射”。范畴论是对数学的某些分支的更高阶的抽象化，所以被称为“一般化的抽象废话”。</p>
</blockquote>
<ul>
<li><p><strong>函子</strong></p>
<p>将范畴再抽象一次（范畴自身也是数学结构的一种），寻找在某一意义下会保持其结构的<em>过程</em>，我们把这一过程称为<strong>函子</strong>，这实际上是定义了一个包含“范畴和函子”的范畴，元件为范畴，态射为函子。</p>
<p>一个从范畴 <em>C</em> 到范畴 <em>D</em> 的函子 <em>F</em> 被定义为：</p>
<ul>
<li>对 <em>C</em> 中任意物件 <em>X</em> ，都有一个 <em>D</em> 中相应的物件 <em>F</em>(<em>X</em>) 与其对应；</li>
<li>对 <em>C</em> 中任意态射 <em>f</em> : <em>X</em> → <em>Y</em> ，都有一个 <em>D</em> 中相应的态射 <em>F</em>(<em>f</em>) : <em>F</em>(<em>X</em>) → <em>F</em>(<em>Y</em>) 与其对应；</li>
</ul>
<p>并使下列性质成立：</p>
<ul>
<li>对 <em>C</em> 中任意的物件 <em>X</em> ，都有 <em>F</em>(id<em>X</em>) = id<em>F</em>(<em>X</em>) 。</li>
<li>对 <em>C</em> 中任意两个态射 <em>f</em> : <em>X</em> → <em>Y</em> 和 <em>g</em> : <em>Y</em> → <em>Z</em>，都有 <em>F</em>(<em>g</em> · <em>f</em>) = <em>F</em>(<em>g</em>) · <em>F</em>(<em>f</em>) 。</li>
</ul>
<p><strong>将范畴映射到自身的函子被称为“自函子(Endofunctor)”</strong>。</p>
</li>
<li><p><strong>组成</strong></p>
<p>一个范畴‘C’是由三个部分组成：</p>
<ul>
<li><p>1.一个类ob(C)，里面的元素称为“物件”</p>
</li>
<li><p>2.一个类hom(C)，其元素为“态射”或“箭号”。每个态射<em>f</em> 都只有一个“源物件”<em>a</em> 及一个“目标物件”<em>b</em>（其中<em>a</em> 和<em>b</em> 都在ob(<em>C</em>) 内），称之为“从<em>a</em> 至<em>b</em> 的态射”，标记为<em>f</em> : <em>a</em> → <em>b</em>。</p>
</li>
<li><p>3.一个二元运算，称为“态射复合”，使得对任意三个物件<em>a</em>、<em>b</em> 及<em>c</em>，都会有hom(<em>b</em>, <em>c</em>) × hom(<em>a</em>, <em>b</em>) → hom(<em>a</em>, <em>c</em>)。两个态射<em>f</em> : <em>a</em> → <em>b</em> 及<em>g</em> : <em>b</em> → <em>c</em> 的复合写做<em>g</em> ∘ <em>f</em> 或<em>gf</em>，并会符合下列两个公理：</p>
<ul>
<li><strong>结合律</strong>：若<em>f</em> : <em>a</em> → <em>b</em>、<em>g</em> : <em>b</em> → <em>c</em>及<em>h</em> : <em>c</em> → <em>d</em>，则<em>h</em> ∘ (<em>g</em> ∘ <em>f</em>) = (<em>h</em> ∘ <em>g</em>) ∘ <em>f</em>；</li>
<li><strong>单位元</strong>：对任意物件<em>x</em>，总存在一个态射1<em>x</em> : <em>x</em> → <em>x</em>（称为<em>x</em> 的<strong>单位态射</strong>），使得对每个态射<em>f</em> : <em>a</em> → <em>b</em>，都会有1<em>b</em> ∘ <em>f</em> = <em>f</em> = <em>f</em> ∘ 1<em>a</em>。</li>
</ul>
<p>（可以看出每个范畴只会有一个<strong>单位元</strong>，monad每个物件只会有一个<strong>单位态射</strong>）</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-Haskell与范畴论"><a href="#2-Haskell与范畴论" class="headerlink" title="2.Haskell与范畴论"></a>2.<em>Haskell</em>与<em>范畴论</em></h3><blockquote>
<p>Haskell中存在着这样的一种唯一的范畴<strong>Hask</strong>其满足我们上面所提到的范畴所满足的所有约定。</p>
</blockquote>
<ol>
<li>物件就是<em>Haskell</em>中的类型，注意<em>Haskell</em>中的类型是一个类，即是一个集合。</li>
<li>态射就是<em>Haskell</em>中的函数（function），如<code>f :: Int -&gt; Bool</code>，函数f就是将Int这个物件的值映射到Bool物件的值上。</li>
<li>态射复合就是Haskell中函数的组合，比如<code>func = f.g</code>。</li>
</ol>
<p>​         可以验证符合上面的两条公理。</p>
<blockquote>
<p>由于Haskell中只有一个范畴，所以如果存在函子那么必然是映射到自身的自函子，那么Haskell中存不存在自函子呢？</p>
</blockquote>
<ol>
<li><p>首先要满足第一个条件：<strong>存在物件与物件之间的映射</strong>。在<em>Haskell</em>中，<strong>type constructor</strong>可以利用一个typeclass构造出其他的typeclass来，例如以下的定义:</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token constant">Tree</span>
<span class="token keyword">data</span> <span class="token constant">Tree</span> <span class="token hvariable">a</span> <span class="token operator">=</span> <span class="token constant">Tip</span> <span class="token operator">|</span> <span class="token constant">Node</span> <span class="token hvariable">a</span> <span class="token punctuation">(</span><span class="token constant">Tree</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Tree</span> <span class="token hvariable">a</span><span class="token punctuation">)</span>
</code></pre>
<p>这里<strong>Node</strong>作为一类类型可以构造出<strong>Tree</strong>这种类型来。</p>
</li>
<li><p>第二个条件：<strong>态射与态射之间的映射</strong>。我们来看下面这种typeclass</p>
<pre class=" language-haskell"><code class="language-haskell"><span class="token keyword">class</span> <span class="token constant">Functor</span> <span class="token hvariable">f</span> <span class="token keyword">where</span>
  <span class="token builtin">fmap</span><span class="token operator">::</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token hvariable">f</span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token hvariable">f</span> <span class="token hvariable">b</span>
</code></pre>
<p>typeclass fmap接受一个函数（物件与物件之间的映射），将其映射到另一个函数上（物件与物件的映射），所以说fmap是一个满足“态射与态射之间的映射”的一个typeclass。</p>
</li>
</ol>
<h3 id="3-monads"><a href="#3-monads" class="headerlink" title="3.monads"></a>3.<em>monads</em></h3><blockquote>
<p>Monads是自函子范畴上的一个幺半群。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说一说‘Monads’&quot;&gt;&lt;a href=&quot;#说一说‘Monads’&quot; class=&quot;headerlink&quot; title=&quot;说一说‘Monads’&quot;&gt;&lt;/a&gt;说一说‘&lt;em&gt;Monads&lt;/em&gt;’&lt;/h1&gt;&lt;h3 id=&quot;1-关于范畴论&quot;&gt;&lt;a href=&quot;#1
    
    </summary>
    
    
      <category term="haskell" scheme="http://poytr1.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>阿里面经</title>
    <link href="http://poytr1.github.io/2017/03/12/%E9%98%BF%E9%87%8C%E9%9D%A2%E7%BB%8F/"/>
    <id>http://poytr1.github.io/2017/03/12/阿里面经/</id>
    <published>2017-03-12T11:34:28.000Z</published>
    <updated>2017-06-22T09:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里电面（java研发）"><a href="#阿里电面（java研发）" class="headerlink" title="阿里电面（java研发）"></a>阿里电面（java研发）</h1><ol>
<li><strong>从下往上说一下OSI七个分层？</strong></li>
</ol>
<ul>
<li>物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</li>
</ul>
<ol>
<li><p><strong>TCP和UDP的区别</strong>？</p>
<ul>
<li>TCP提供面向连接的、可靠的数据流传输，而UDP提供的是非面向连接的、不可靠的数据流传输。（TCP发出去还会问候核实一下以确保安全; UDP发出去就不管了 ）</li>
<li>TCP传输单位称为TCP报文段，UDP传输单位称为用户数据报。</li>
<li>TCP注重数据安全性，UDP数据传输快，因为不需要连接等待，少了许多操作，但是其安全性却一般。</li>
</ul>
</li>
<li><p><strong>说说数据库连接（join）？</strong></p>
<ul>
<li>Inner join–产生的是AB两个集合的交集    </li>
<li>left[outer]join–产生A的完全集，而B中匹配的则有值，没有匹配的则返回null </li>
<li>right[outer]join–产生B的完全集，而A中匹配的则有值，没有匹配的则返回null </li>
</ul>
</li>
<li><p><strong>说说事务？</strong></p>
<ul>
<li>所谓事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。</li>
</ul>
</li>
<li><p><strong>HashMap原理？</strong></p>
<ul>
<li><p>底层是数组加链表实现的哈希表。允许null作为键，null作为值。线程不安全。</p>
</li>
<li><p>为什么用数组+链表实现？</p>
<p>利用拉链法解决冲突：把所有的同义词用单链表链接起来。该方法下，哈希表每个单元中存放的不再是元素本身，而是相应同义词单链表的头指针。</p>
</li>
<li><p>HashMap维护了一个Entry数组，Entry内部类有key,value，hash和next四个字段，其中next也是一个Entry类型。可以将Entry数组理解为一个个的散列桶。每一个桶实际上是一个单链表。当执行put操作时，会根据key的hashcode定位到相应的桶。   遍历单链表检查该key是否已经存在，如果存在，覆盖该value，反之，新建一个新的Entry，并放在单链表的头部。当通过传递key调用get方法时，它再次使用key.hashCode()来找到相应的散列桶，然后使用key.equals()方法找出单链表中正确的Entry，然后返回它的值。 </p>
</li>
<li><p>HashMap：线程不同步。根据key的hashcode进行存储，内部使用静态内部类Node的数组进行存储，默认初始大小为16，每次扩大一倍。当发生Hash冲突时，采用拉链法（链表）。可以接受为null的键值(key)和值(value)。JDK1.8中：当单个桶中元素个数大于等于8时，链表实现改为红黑树实现；当元素个数小于6时，变回链表实现。由此来防止hashCode攻击。</p>
</li>
<li><p>Hashtable是线程安全的。ConcurrentHashMap 针对读操作做了大量的优化。通过 HashEntry 对象的不变性和用 volatile 型变量协调线程间的内存可见性，使得 大多数时候，读操作不需要加锁就可以正确获得值。这个特性使得 ConcurrentHashMap 的并发性能在分离锁的基础上又有了近一步的提高。ConcurrentHashMap 的高并发性主要来自于三个方面：</p>
</li>
<li><p>用分离锁实现多个线程间的更深层次的共享访问。</p>
</li>
<li>用 HashEntery 对象的不变性来降低执行读操作的线程在遍历链表期间对加锁的需求。</li>
<li>通过对同一个 Volatile 变量的写 / 读访问，协调不同线程间读 / 写操作的内存可见性。</li>
</ul>
</li>
<li><p><strong>Java运行时数据区域？</strong> </p>
<ul>
<li>包括程序计数器、JVM栈、本地方法栈、方法区、堆  </li>
</ul>
</li>
<li><p><strong>方法区里存放什么？</strong></p>
<ul>
<li>由于程序计数器、JVM栈、本地方法栈3个区域随线程而生随线程而灭，对这几个区域内存的回收和分配具有确定性。 而方法区和堆则不一样，程序需要在运行时才知道创建哪些对象，对这部分内存的分配是动态的，GC关注的也就是这部分内存。</li>
</ul>
</li>
</ol>
<ul>
<li>本地方法栈：和jvm栈所发挥的作用类似，区别是jvm栈为jvm执行java方法（字节码）服务，而本地方法栈为jvm使用的native方法服务。 </li>
<li>JVM栈：局部变量表、操作数栈、动态链接、方法出口。 <ul>
<li>方法区：用于存储已被虚拟机加载的类信息，常量、静态变量、即时编译器编译后的代码等。 </li>
<li>堆：存放对象实例。</li>
</ul>
</li>
</ul>
<ol>
<li><p><strong>怎样判断是否需要收集？</strong></p>
<ul>
<li>引用计数法：对象没有任何引用与之关联(无法解决循环引用) </li>
<li>可达性分析法：通过一组称为GC Root的对象为起点,从这些节点向下搜索，如果某对象不能从这些根对象的一个(至少一个)所到达,则判定该对象应当回收。 </li>
</ul>
</li>
<li><p><strong>什么可作为GCRoot的对象？</strong></p>
<ul>
<li>虚拟机栈中引用的对象。方法区中类静态属性引用的对象，方法区中类常量引用的对象，本地方法栈中JNI引用的对象。</li>
</ul>
</li>
<li><p><strong>Spring IOC/AOP？</strong>  </p>
</li>
</ol>
<ul>
<li><em>AOP（Aspect-OrientedProgramming，面向方面编程</em>,可以说是<em>OOP（Object-Oriented Programing，面向对象编程）</em>的补充和完善。 OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。 也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为<em>横切（cross-cutting）</em>代码， 在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。<em>依赖注入(Dependency Injection)</em>和<em>控制反转(Inversion of Control)</em>是同一个概念.当某个角色(可能是一个Java实例，调用者)需要另一个角色(另一个Java实例，被调用者)的协助时，在传统的程序设计过程中，通常由调用者来创建被调用者的实例.但在Spring里，创建被调用者的工作不再由调用者来完成，因此称为控制反转;创建被调用者实例的工作通常由Spring容器来完成，然后注入调用者，因此也称为依赖注入.不管是依赖注入，还是控制反转，都说明Spring采用动态、灵活的方式来管理各种对象。对象与对象之间的具体实现互相透明。 在理解依赖注入之前，看如下这个问题在各种社会形态里如何解决:一个人(Java实例，调用者)需要一把斧子(Java实例，被调用者)。</li>
</ul>
<ol>
<li><strong>自己在应用中写过什么切面？</strong></li>
</ol>
<p>AOP使用场景：  </p>
<ul>
<li>Authentication 权限 </li>
<li>Caching 缓存 <ul>
<li>Context passing 内容传递 </li>
<li>Error handling 错误处理 </li>
<li>Lazy loading　懒加载 </li>
<li>Debugging　　调试 </li>
<li>logging, tracing, profiling and monitoring　记录跟踪　优化　校准 </li>
<li>Performance optimization　性能优化 </li>
<li>Persistence　　持久化 </li>
<li>Resource pooling　资源池 </li>
<li>Synchronization　同步 </li>
<li>Transactions 事务</li>
</ul>
</li>
</ul>
<ol>
<li><p><strong>JVM如何加载一个类的过程，双亲委派模型中有哪些方法？</strong></p>
<ul>
<li><strong>加载</strong>：定位要加载的类文件，并将其字节流装载到JVM中；</li>
<li><strong>链接</strong>：给要加载的类分配最基本的内存结构保存其信息，比如属性，方法以及引用的类。在该阶段，该类还处于不可用状态；验证：对加载的字节流进行验证，比如格式上的，安全方面的；内存分配：为该类准备内存空间来表示其属性，方法以及引用的类；解析：加载该类所引用的其它类，比如父类，实现的接口等。</li>
<li><strong>初始化：</strong>对类变量进行赋值。</li>
<li><code>getParent()</code>,<code>findLoadedClass()</code>,<code>LoadClass()</code>,<code>findBootstrapClassOrNull()</code>,<code>findClass()</code>,<code>resolveClass()</code></li>
</ul>
</li>
<li><p><strong>进程间通信有哪几种方式？</strong></p>
<p>| 类型            | 无连接  | 可靠   | 流控制  | 优先级  |<br>| ————- | —- | —- | —- | —- |<br>| 消息队列          | N    | Y    | Y    | Y    |<br>| 信号量           | N    | Y    | Y    | Y    |<br>| 共享内存          | N    | Y    | Y    | Y    |<br>| UNIX流SOCKET   | N    | Y    | Y    | N    |<br>| UNIX数据包SOCKET | Y    | Y    | N    | N    |<br>| 普通PIPE        | N    | Y    | Y    | N    |<br>| 流PIPE         | N    | Y    | Y    | N    |<br>| 命名PIPE(FIFO)  | N    | Y    | Y    | N    |</p>
</li>
<li><p><strong>Linux下如何进行进程调度的？</strong></p>
<ul>
<li><p><strong>实时进程的调度</strong></p>
<p>不同调度策略的实时进程只有在相同优先级时才有可比性：</p>
<ul>
<li>对于FIFO的进程，意味着只有当前进程执行完毕才会轮到其他进程执行。由此可见相当霸道。</li>
<li>对于RR的进程。一旦时间片消耗完毕，则会将该进程置于队列的末尾，然后运行其他相同优先级的进程，如果没有其他相同优先级的进程，则该进程会继续执行。</li>
</ul>
</li>
<li><p><strong>非实时进程调度</strong></p>
<p>Linux对普通的进程，根据动态优先级进行调度。而动态优先级是由静态优先级（static_prio）调整而来（考虑了进程的属性）。Linux下，静态优先级是用户不可见的，隐藏在内核中。</p>
</li>
<li><p><strong>现代方法CFS</strong></p>
<p>不再单纯依靠进程优先级绝对值，而是参考其绝对值，综合考虑所有进程的时间，给出当前调度时间单位内其应有的权重，也就是，每个进程的权重X单位时间=应获cpu时间，但是这个应得的cpu时间不应太小（假设阈值为1ms），否则会因为切换得不偿失。但是，当进程足够多时候，肯定有很多不同权重的进程获得相同的时间——最低阈值1ms，所以，CFS只是近似完全公平。</p>
</li>
</ul>
</li>
<li><p><strong>什么是一致性哈希？</strong></p>
<ul>
<li>将 Item 均匀地分布（Even Distribution）到不同的 Bucket 中，也就是<strong>负载均衡（Load Balancing）</strong>。</li>
<li>一致性哈希的实现：<ul>
<li>对所有的 Buckets 和 Items 应用相同的哈希函数 H，按照哈希值的顺序把它们排列到一条线上，然后将距离 Bucket 最近的 Items 都放入该 Bucket 中。</li>
<li>另一种实现方式是把哈希值的最大值和最小值连接到一起，形成一个哈希环（Consistent Hashing Ring），按照顺时针方向将 Items 放入 Bucket 中。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>linux中socket编程，底层实现？</strong></p>
<ul>
<li>对于应用TCP/IP协议的应用程序，UNIX BSD提供了SOCKET的应用编程接口。</li>
<li>socket起源于Unix，而Unix/linux基本哲学之一就是“一切皆文件”，都可以用“打开open –&gt; 读写write/read –&gt; 关闭close”模式来操作。Socket就是该模式的一个实现， socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写IO、打开、关闭）.说白了Socket是应用层与TCP/IP协议族通信的中间软件抽象层，<strong>它是一组接口</strong>。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</li>
<li>当应用程序要创建一个套接字时，操作系统就返回一个小整数作为描述符，应用程序则使用这个描述符来引用该套接字需要I/O请求的应用程序请求操作系统打开一个文件。操作系统就创建一个文件描述符提供给应用程序访问文件。从应用程序的角度看，文件描述符是一个整数，应用程序可以用它来读写文件。</li>
</ul>
</li>
<li><p><strong>socket连接数目的瓶颈？</strong></p>
<p>Server的内存</p>
</li>
<li><p><strong>java中的软引用，弱引用？</strong></p>
<ul>
<li><p>如果一个对象只具有软引用(<em>SoftReference</em>)，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。<strong>软引用可用来实现内存敏感的高速缓存。</strong>   </p>
<pre class=" language-java"><code class="language-java"> String str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// 强引用</span>
 SoftReference<span class="token operator">&lt;</span>String<span class="token operator">></span> softRef<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 软引用</span>
</code></pre>
</li>
<li><p>弱引用(<em>WeakReference</em>)与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p>
<pre class=" language-java"><code class="language-java">String str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
WeakReference<span class="token operator">&lt;</span>String<span class="token operator">></span> abcWeakRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
str<span class="token operator">=</span>null<span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
</li>
<li><p><strong>了解rpc吗？</strong></p>
<ul>
<li>RPC： 远程过程调用（<em>Remote Procedure Call</em>）</li>
<li>远程过程调用采用客户机/服务器(C/S)模式。请求程序就是一个客户机，而服务提供程序就是一台服务器。和常规或本地过程调用一样，远程过程调用是同步操作，在远程过程结果返回之前，需要暂时中止请求程序。使用相同地址空间的低权进程或低权线程允许同时运行多个远程过程调用。</li>
</ul>
</li>
<li><p><strong>什么是epoll？</strong></p>
<ul>
<li>epoll是linux内核为处理大批量文件描述符而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。</li>
<li>提供了边缘触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少epoll_wait/epoll_pwait的调用，提高应用程序效率。</li>
<li>优点：<ul>
<li><strong>支持一个进程打开大数目的socket描述符</strong></li>
<li><strong>IO效率不随FD数目增加而线性下降</strong></li>
<li><strong>使用mmap加速内核与用户空间的消息传递</strong></li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<p>​</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;阿里电面（java研发）&quot;&gt;&lt;a href=&quot;#阿里电面（java研发）&quot; class=&quot;headerlink&quot; title=&quot;阿里电面（java研发）&quot;&gt;&lt;/a&gt;阿里电面（java研发）&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;从下往上说一下OSI七个分层？&lt;
    
    </summary>
    
    
      <category term="面试" scheme="http://poytr1.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
